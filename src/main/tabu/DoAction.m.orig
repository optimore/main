<<<<<<< HEAD
function [status,data] = DoAction( model,data,actionList,costList,logfile,resultfile )
=======
function [status,data, tabuList] = DoAction(model,data,actionList,costList,tabuList,logfile )
>>>>>>> master
%DOACTION Summary of this function goes here
%   Detailed explanation goes here


status = 0;
try
    
    % 1. Find list of actions generating lowest cost
    [sortedCosts, indexes] = sort(costList);
    
    % Loop through min-solutions in ascending order
    for i = 1:length(costList)
        
        notintabu = 1;
        index = indexes(i);
        actionSolution = actionList{index}.actionSolution(:,2);
        
<<<<<<< HEAD
        fprintf(logfile, ['Calculated ',num2str(length(costList)), ...
        ' actions. Lowest cost is ', num2str(lowestCost),'.\n']);
        timenow = toc;
        fprintf(resultfile,[',',num2str(lowestCost),',',num2str(timenow),'\n']);
=======
        % Compare solution with tabu list solutions
        for j = 1:length(tabuList)
            tabuSolution = tabuList{j};
            
            
            % Break if action in tabulist
            if isequal(tabuSolution, actionSolution) == 1
                notintabu = 0;
                break;
            end
        end
>>>>>>> master
        
        
        if notintabu == 1
        
            % Add action to tabu list
            actioncell = num2cell(actionSolution, 1);
            tabuList(2:end) = tabuList(1:end-1);
            tabuList(1) = actioncell;
            
            
            % Perform action
            lowestCost = sortedCosts(i);
            data.tasks(:,6) = actionSolution;
            
            fprintf(logfile, ['Calculated ',num2str(length(costList)), ...
                ' actions. Lowest cost is ', num2str(lowestCost),'.\n']);
            break;
        end
        
    end
    
    status = 1;
catch err
    
    
    status = -1;
end


end

