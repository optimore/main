% MAIN launcher script, simulating GUI code

clc; close all;

% 1. This data is generated by gui or test launcher scripts:
dataParameters = struct('name',{},'path',{});

% 1.1 Create data object when user selects it:
dataObj1.name = 'A2';
dataObj1.path = 'src/test/testdata/Z9.1494_2015-11-09T11-32-57/';
% A2_2015-10-30T15-14-12/';
dataParameters{1} = dataObj1;

models.m1 = [2,1];


% 2. Create models when user selects them:
modelParameters = struct( ...
    'tabu', struct('active',1,'initial',1,'phases',[2,1]), ...
    'LNS' , struct('active',0,'initial',1,'phases',[1]), ...
    'ampl', struct('active',0,'initial',1,'phases',[1]));



disp('------------------ OPTIMORE LAUNCHED ------------------\n')
disp('please select one option bellow by entering a number:\n')
disp('1. Create data gui\n2. Launch a fix solution sequence\n')
disp('-------------------------------------------------------')
noQuit = 1;

while noQuit
    try
        prompt = 'Select one option 1-2, 3 for quit: '; 
        nr = input(prompt,'s');

        switch num2str(nr)
            case '1',
                addpath(genpath('src/main/guitest/createdatagui'));
                GUI
                rmpath(genpath('src/main/guitest/createdatagui'));
            case '2',
                % 3. run launcher
                status = mainlauncher(dataParameters, modelParameters);
                % 4. Print errors if they occure:
                SNames = fieldnames(status); 
                nFields = length(SNames);
                for i = 1:nFields
                    % SNames{i}
                    if (status.(SNames{i})==-1)
                       type(status.logPath)
                    end
                end
            case '3',
                disp('Quitting');
                pause(1);
                clc
                noQuit = 0;
            otherwise,
                noQuit = 1;
        end
    catch err
        disp(err.stack)
    end
end


